# -*- coding: utf-8 -*-
"""Chatbot_LLM_with_RAG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ow2rNVOyQKowv8nTp_pBgwZsZSrFXqiJ
"""

import os
import textwrap

import chromadb
import langchain
import openai
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import TextLoader, UnstructuredPDFLoader, YoutubeLoader, PyPDFLoader
from langchain.embeddings import HuggingFaceEmbeddings, OpenAIEmbeddings
from langchain.indexes import VectorstoreIndexCreator
from langchain.llms import OpenAI
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import Chroma
from langchain.llms import GPT4All
from pdf2image import convert_from_path
import streamlit

"""Download file pdf"""

# Download file pdf
!gdown https://drive.google.com/uc?id=16kk1KEqoorpVghSlMLI7O7PCfhr0Fucc

"""Load Data & Model"""

from getpass import getpass
OPENAI_API_KEY = getpass()
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

model = OpenAI(temperature=0, model_name="gpt-3.5-turbo")

images = convert_from_path("Li_thuyet_Hadoop.pdf", dpi=88)
len(images)

images[0]

"""Use UnstructuredPDFLoader to load PDFs"""

# Use UnstructuredPDFLoader to load PDFs from the Internets
pdf_loader = UnstructuredPDFLoader("Li_thuyet_Hadoop.pdf")
pdf_pages = pdf_loader.load_and_split()

# Text Splitters
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1024, chunk_overlap=64)
texts = text_splitter.split_documents(pdf_pages)
len(texts)

"""Create Embeddings & Vectorstores"""

MODEL_NAME = "sentence-transformers/all-MiniLM-L6-v2"
hf_embeddings = HuggingFaceEmbeddings(model_name=MODEL_NAME)

db = Chroma.from_documents(texts, hf_embeddings, persist_directory="db")

"""#Use a Chain"""

custom_prompt_template = """Sử dụng các thông tin sau đây để trả lời câu hỏi của người dùng.
Nếu bạn không biết câu trả lời, chỉ cần nói rằng bạn không biết, đừng cố bịa ra câu trả lời.
Tất cả câu trả lời của bạn đều phải trả lời bằng tiếng việt

Context: {context}
Question: {question}

"""

from langchain import PromptTemplate
def set_custom_prompt():
    """
    Prompt template for QA retrieval for each vectorstore
    """
    prompt = PromptTemplate(template=custom_prompt_template,
                            input_variables=['context', 'question'])
    return prompt

prompt = set_custom_prompt()
chain = RetrievalQA.from_chain_type(
    llm=model,
    chain_type="stuff",
    retriever=db.as_retriever(search_kwargs={"k": 2}),
    chain_type_kwargs={'prompt': prompt}
)

"""#QA Chatbot"""

def print_response(response: str):
    print("\n".join(textwrap.wrap(response, width=100)))

query = st.text_input("Nhập câu hỏi", "Phạm vi áp dụng có nằm trong mục đích hay không?")
response = chain.run(query)
st.write(response)

query = "MapReduce là gì?"
response = chain.run(query)
print_response(response)

query = "Hadoop là gì?"
response = chain.run(query)
print_response(response)

query = "Kiến trúc của Hadoop gồm những gì?"
response = chain.run(query)
print_response(response)
